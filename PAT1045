/*
 * 着重讲一下下面这种判断是否为主元的方法，先将副本冒泡排序，
 * 再逐个遍历是否有相等元素，遍历的同时将当前元素的所有前置项
 * 都进行一次简单排序，保持最大的元素位于最前，再对比该最大值与
 * 当前元素的大小关系，若当前元素大于等于最值元素，则该元素是主元
 * 并记录，否则不是。
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <assert.h>

int compare(const void *a,const void *b){
    return *(int *)a-*(int *)b;
}


int main() {
    int n;
    int *a,*b,*c;
    int count=0;

    scanf("%d",&n);
    a=(int *)malloc(sizeof(int )*n);
    assert(a);
    b=(int *)malloc(sizeof(int )*n);
    assert(a);
    c=(int *)malloc(sizeof(int )*n);
    assert(c);
    for(int i=0;i<n;i++){
        scanf("%d",&(a[i]));
        b[i]=a[i];
    }
    qsort(b,(size_t)n,sizeof(int),compare);
    int max_pre=a[0];
    for(int i=0;i<n;i++){
        if(a[i]==b[i]&&a[i]>=max_pre){
            c[count++]=b[i];
        }
        if(i&&a[i-1]>a[i]){
            int k=a[i-1];
            a[i-1]=a[i];
            a[i]=k;
        }
        max_pre=a[i];
    }
    if(count==0){
        printf("0\n\n");
        free(a);
        free(b);
        free(c);
        exit(0);
    }
    printf("%d\n",count);
    for(int i=0;i<count;i++){
        if(i){
            printf(" %d",c[i]);
        }
        else{
            printf("%d",c[i]);
        }
    }
    free(a);
    free(b);
    free(c);

    return 0;
}
